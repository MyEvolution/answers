#include<stdio.h>
int pow(int x,int n)//n转化为2进制有几位？ 
{                   //O(logN)
      int y=x;
      int i=0;//记录到第几位 
      int num=1;
  	while(n!=0)//操作logN+1次 
  	{
  		
  		if(i!=0)
  		  y*=y;
       if(n&1)
        num*=y;
        n>>=1;//右移      
  	   i++;
  	    }
  	    return num;
 } 
 int main()
 {
 	int x,n;
 	while(scanf("%d %d",&x,&n)!=EOF)
 	  printf("%d\n",pow(x,n));
 }
 //是一个快速求幂的好办法
 //首先   几次方化为2进制后，也就是各位为1的和 所以也就是各位为1的次方的相乘
 //齐次  好处是 2进制每个位都是2的幂，前一位就是后一位的平方，所以完全可以根据后一位的推出前一位 而且是很快的算法 
 // 比如3^10  10表示为2进制  1010，也就是8，2  
 //  3^8*3^2，可以很轻松求出 3^2==3*3,3^4=3^2*3^2;3^8=3^4*3^4;只需要3次乘法，即可求得，实际上，需要的乘法次数就是N转化为二进制后的位数
 //即O（logN）。 
 // 5logN 
